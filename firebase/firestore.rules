rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function willHaveFields(required, optional) {
      let allAllowedFields = required.concat(optional);

      return request.resource.data.keys().hasAll(required) &&
      request.resource.data.keys().hasOnly(allAllowedFields);
    }

    function willBeUnchanged(fields) {
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny(fields);
    }

    function willBeChanged(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }

    function existsIn(collection, id) {
      return exists(/databases/$(database)/documents/$(collection)/$(id));
    }

    function existsInAfter(collection ,id) {
      return existsAfter(/databases/$(database)/documents/$(collection)/$(id));
    }

    function getIn(collection, id) {
      return get(/databases/$(database)/documents/$(collection)/$(id));
    }

    function getInAfter(collection, id) {
      return getAfter(/databases/$(database)/documents/$(collection)/$(id));
    }

    function isFollowing(user1Id, user2Id) {
      return (
        existsIn(/follows, /$(user1Id)/to/$(user2Id)) &&
        getIn(/follows, /$(user1Id)/to/$(user2Id)).data.status == 'accepted'
      );
    }

    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }

    match /usernames/{username} {
      function userExistsAfter() {
        return (
          existsInAfter(/users, request.resource.data.userId) &&
          getInAfter(/users, request.resource.data.userId).data.username == username
        );
      }

      allow read: if true;

      allow create: if (
        request.auth != null &&
        request.auth.uid == request.resource.data.userId &&
        willHaveFields(['userId'], []) &&
        userExistsAfter()
      );
    }

    match /users/{id} {
      function willHaveUserFields() {
        return willHaveFields(['username', 'private'], ['imageUrl']);
      }

      function usernameExistsAfter() {
        return existsInAfter(/usernames, request.resource.data.username);
      }

      allow read: if true;

      allow create: if (
        request.auth != null &&
        request.auth.uid == id &&
        willHaveUserFields() &&
        usernameExistsAfter()
      );

      allow update: if (
        request.auth != null &&
        request.auth.uid == id &&
        willHaveUserFields() &&
        willBeUnchanged(['username', 'private'])
      );
    }

    match /follows/{fromUserId}/to/{toUserId} {
      function willHaveFollowFields() {
        return willHaveFields(['status'], []);
      }

      function isPublic() {
        return (
          getIn(/users, fromUserId).data.private == false ||
          getIn(/users, toUserId).data.private == false
        );
      }

      function includesMe() {
        return request.auth != null && (fromUserId == request.auth.uid || toUserId == request.auth.uid);
      }

      function belongsToFollowed() {
        return request.auth != null && (
          isFollowing(request.auth.uid, fromUserId) || isFollowing(request.auth.uid, toUserId)
        );
      }

      allow read: if (
        includesMe() ||
        (
          resource.data.status == 'accepted' &&
          (isPublic() || belongsToFollowed())
        )
      );

      allow create: if (
        request.auth != null && request.auth.uid == fromUserId && willHaveFollowFields() && (
          (getIn(/users, toUserId).data.private == true && request.resource.data.status == 'pending') ||
          (getIn(/users, toUserId).data.private == false && request.resource.data.status == 'accepted')
        )
      );

      allow update: if (
        request.auth != null &&
        request.auth.uid == toUserId &&
        willHaveFollowFields() &&
        request.resource.data.status == 'accepted'
      );

      allow delete: if (
        request.auth != null && (request.auth.uid == toUserId || request.auth.uid == fromUserId)
      );
    }

    match /intentions/{id} {
      function willHaveIntentionFields() {
        return willHaveFields(['userId', 'name'], []);
      }

      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      function followsOwner() {
        return request.auth != null && isFollowing(request.auth.uid, resource.data.userId);
      }

      function ownerIsPublic() {
        return getIn(/users, resource.data.userId).data.private == false;
      }

      allow read: if (isOwner() || ownerIsPublic() || followsOwner());

      allow create: if (
        request.auth != null &&
        request.auth.uid == request.resource.data.userId &&
        willHaveIntentionFields()
      );
    }

    match /posts/{id} {
      function willHavePostFields() {
        return willHaveFields(['userId', 'intentionId', 'createdAt'], ['imageUrl', 'description']);
      }

      function isOwner() {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      function followsOwner() {
        return request.auth != null && isFollowing(request.auth.uid, resource.data.userId);
      }

      function ownerIsPublic() {
        return getIn(/users, resource.data.userId).data.private == false;
      }

      function willHaveDescOrImg() {
        return (
          (request.resource.data.description != null && request.resource.data.description != '') ||
          (request.resource.data.imageUrl != null)
        );
      }

      allow read: if (isOwner() || ownerIsPublic() || followsOwner());

      allow create: if (
        request.auth != null &&
        request.auth.uid == request.resource.data.userId &&
        willHavePostFields() &&
        willHaveDescOrImg()
      );

      allow update: if (isOwner() && willBeChanged(['description']));

      allow delete: if isOwner();
    }
  }







}
